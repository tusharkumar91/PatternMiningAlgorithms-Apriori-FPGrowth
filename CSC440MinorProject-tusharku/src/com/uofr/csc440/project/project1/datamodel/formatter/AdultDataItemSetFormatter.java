package com.uofr.csc440.project.project1.datamodel.formatter;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.uofr.csc440.project.project1.datamodel.AdultDataSetItem;

/**
 * Formatter class for printing an itemset once they have
 * been generated by an algorithm. The formatter basically
 * does printing in a manner that makes it readable and that
 * provides all the necessary details to the client.
 * @author tusharkumar
 *
 */
public class AdultDataItemSetFormatter implements ItemsetFormatter {
	
	private int totalTransactions = 0;
	
	@Override
	public void setTotalTransactions(int totalTransactions) {
		this.totalTransactions = totalTransactions;		
	}
	
	/**
	 * Overidden method to print the itemsets that 
	 * are generated from the Adult data set.
	 * @param patternMapping - refers to map of frequent itemsets and their support
	 */
	@Override
	public void formatAndPrintItemSets(Map<List<Integer>, Integer> patternMapping) {
		int maxK = 0;
		for(List<Integer> frequentItemSets : patternMapping.keySet()) {
			maxK = Math.max(maxK, frequentItemSets.size());
		}
		List<List<List<Integer>>> frequentItemSets = new ArrayList<List<List<Integer>>>();
		for(int i=0; i<maxK; i++) {
			frequentItemSets.add(new ArrayList<List<Integer>>());
		}

		for(List<Integer> itemSets : patternMapping.keySet()) {
			frequentItemSets.get(itemSets.size()-1).add(itemSets);
		}
		
		List<List<List<AdultDataSetItem>>> formattedItemSets = new ArrayList<List<List<AdultDataSetItem>>>();		
		for(List<List<Integer>> kItemSet : frequentItemSets) {
			List<List<AdultDataSetItem>> kthFormattedItemSet = new ArrayList<List<AdultDataSetItem>>();
			for(List<Integer> kItemSetMember : kItemSet) {
				List<AdultDataSetItem> kthFormattedItemSetMember = new ArrayList<AdultDataSetItem>();
				for(Integer kItemSetMemberValue : kItemSetMember) {
					AdultDataSetItem formattedItem = AdultDataSetItem.getItemFromValue(kItemSetMemberValue);
					kthFormattedItemSetMember.add(formattedItem);
				}
				kthFormattedItemSet.add(kthFormattedItemSetMember);				
			}
			formattedItemSets.add(kthFormattedItemSet);
		}
		printItemSetDetails(formattedItemSets, patternMapping);
	}
		
		
	/**
	 * Helper method to print all detailed description of itemsets
	 * including their support and sizes	
	 * @param formattedItemSets
	 * @param patternMapping
	 */
	private void printItemSetDetails(List<List<List<AdultDataSetItem>>> formattedItemSets, Map<List<Integer>, Integer> patternMapping) {	
		int size = 0;
		System.out.println("===================================");
		System.out.println("Item Sets");
		System.out.println("===================================");
		for(int k=0; k<formattedItemSets.size(); k++) {
			System.out.println("---------------------------------------");
			System.out.println("Number of Itemsets of size " + (k+1) + " : " + formattedItemSets.get(k).size());
			System.out.println("---------------------------------------");
			boolean showOnlySamples = (formattedItemSets.get(k).size() >= 1) ? true : false;
			if(showOnlySamples) {
				System.out.println("\nPrinting one of them because of their huge number\n");
			}
			int count = 0;
			for(List<AdultDataSetItem> formattedKItemSets : formattedItemSets.get(k)) {
				count++;
				if(showOnlySamples && count > 1) {
					break;
				}
				List<Integer> integralItemSet = new ArrayList<Integer>();
				System.out.print("{");
				for(int itemSetIndex =0; itemSetIndex< formattedKItemSets.size(); itemSetIndex++) {
					AdultDataSetItem item = formattedKItemSets.get(itemSetIndex);
					System.out.print(item);
					if(itemSetIndex != formattedKItemSets.size()-1) {
						System.out.print(", ");
					}
					integralItemSet.add(item.getValue());
				}				
				System.out.print("}");
				System.out.print("\n");
				System.out.print("Relative Support : " + ((float) patternMapping.get(integralItemSet))/totalTransactions);
				System.out.print("\n\n");
			}
			System.out.println("\n");
			size = size + formattedItemSets.get(k).size();
		}
		System.out.println("Total Itemsets : " + size);
	}
}
